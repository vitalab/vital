from typing import List

from vital.utils.jobs.job import Job, SbatchCommands, SetupOptions


class SlurmSetupOptions(SetupOptions):
    """Collection of configuration options describing how to setup scripts to run jobs using SLURM.

    Args:
        modules: Modules to load in the context of the job.
    """

    modules: List[str]


class SlurmJob(Job):
    """Class that can generate SLURM job scripts and submit them."""

    RUN_CMD = "sbatch"

    def __init__(
        self,
        setup_options: SlurmSetupOptions,
        sbatch_commands: SbatchCommands = None,
        **kwargs,
    ):
        """Initializes class instance.

        Args:
            sbatch_commands: User-defined commands for configuring the job's resources, in a (`opt_name`, `opt_value`)
                mapping.
            setup_options: Collection of configuration options describing how to prepare the compute node to run the
                job.
        """
        super().__init__(setup_options=setup_options, **kwargs)
        if sbatch_commands is None:
            sbatch_commands = {}
        self._sbatch_commands = sbatch_commands

    def _build_script_str(self) -> str:
        sub_commands = []

        command = [
            "#!/bin/bash",
            "#",
            "# Auto-generated by vital (https://github.com/nathanpainchaud/vital)",
            "#################\n",
        ]
        sub_commands.extend(command)

        # add job name
        command = ["# set a job name", f"#SBATCH --job-name={self._job_name}", "#################\n"]
        sub_commands.extend(command)

        # add out output
        if self._enable_log_out:
            command = [
                "# a file for job output, you can check job progress",
                f"#SBATCH --output={self._save_dir / 'slurm_output.out'}",
                "#################\n",
            ]
            sub_commands.extend(command)

        # add err output
        if self._enable_log_err:
            command = [
                "# a file for errors",
                f"#SBATCH --error={self._save_dir / 'slurm_output.err'}",
                "#################\n",
            ]
            sub_commands.extend(command)

        # add user-defined slurm commands
        sub_commands.append("# user-defined slurm commands")
        for slurm_option, value in self._sbatch_commands.items():
            sub_commands.append(f"#SBATCH --{slurm_option}={value}")
        sub_commands.append("#################\n")

        # load modules
        sub_commands.append("# user-defined modules to load")
        for module in self._setup_options.get("modules", []):
            cmd = f"module load {module}"
            sub_commands.append(cmd)
        sub_commands.append("#################\n")

        # add additional commands
        sub_commands.append("# user-defined setup before main task")
        for cmd in self._setup_options.get("commands", []):
            sub_commands.append(cmd)
        sub_commands.append("#################\n")

        # add run command
        sub_commands.append("# main task")
        sub_commands.append(f"python {self._setup_options['script']} {self._script_args}")
        sub_commands.append("#################\n")

        # build full command with empty lines in between
        script_str = "\n".join(sub_commands)
        return script_str
